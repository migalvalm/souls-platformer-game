[gd_scene load_steps=23 format=2]

[ext_resource path="res://scenes/player/player.tscn" type="PackedScene" id=1]
[ext_resource path="res://v2_assets/player/_Run.png" type="Texture" id=2]
[ext_resource path="res://v2_assets/player/_Idle.png" type="Texture" id=3]
[ext_resource path="res://v2_assets/player/_Attack.png" type="Texture" id=5]

[sub_resource type="GDScript" id=30]
script/source = "extends KinematicBody2D
class_name PlayerTest

const SPELL: PackedScene = preload(\"res://scenes/player/spell_area.tscn\")
onready var player_sprite: Sprite = get_node(\"Texture\")
onready var wall_ray: RayCast2D = get_node(\"WallRay\")
onready var stats: Node = get_node(\"Stats\")

var direction: int = -1
var velocity: Vector2
var spell_offset: Vector2 = Vector2(100, -50)
var jump_count: int = 0

#States
var on_hit: bool = false
var dead: bool = false
var landing: bool = false
var on_wall: bool = false
var attacking: bool = false
var defending: bool = false
var crouching: bool = false

var flipped: bool = false
var not_on_wall: bool = true
var can_track_input: bool = true

export(int) var speed
export(int) var jump_speed
export(int) var wall_jump_speed

export(int) var wall_gravity
export(int) var player_gravity
export(int) var wall_impulse_speed
export(int) var magic_attack_cost

func _ready():
	#TODO Find out why collision shape begins enabled and as a square (This one is only touched in the Animation node)
	#so... Hammer Time
	#When rendered player attack area starts disabled
	$AttackArea.get_node(\"Collision\").set_deferred(\"disabled\", true)

func _physics_process(delta: float):
	horizontal_movement_env()
	vertical_movement_env()
	actions_env()
	
	gravity(delta)
	velocity = move_and_slide(velocity, Vector2.UP)
	player_sprite.animate(velocity)

func horizontal_movement_env() -> void:
	var input_direction: float = Input.get_action_strength(\"right\") - Input.get_action_strength(\"left\")
	
	if can_move():
		velocity.x = input_direction * speed
		return
		
	velocity.x = 0

func vertical_movement_env() -> void:
	if is_on_floor() or is_on_wall(): 
		jump_count = 0

	if Input.is_action_just_pressed(\"jump\") and jump_count < 2 and can_move():
		jump_count += 1

		spawn_effect(\"res://scenes/effect/dust/jump.tscn\", Vector2(0,18), is_flipped())
		if next_to_wall() and not is_on_floor():
			velocity.y = wall_jump_speed
			velocity.x += wall_impulse_speed * direction
		else:
			velocity.y = jump_speed

func actions_env() -> void:
	attack()
	crouch()
	defense()

func attack() -> void:
	var attack_condition: bool = not attacking and not crouching and not defending and is_on_floor() 
	
	if Input.is_action_just_pressed(\"attack\") and attack_condition:
		attacking = true
		player_sprite.normal_attack = true
	elif Input.is_action_just_pressed(\"magic_attack\") and attack_condition and stats.current_mana >= magic_attack_cost:
		attacking = true
		player_sprite.magic_attack = true
		stats.update_mana(\"Decrease\", magic_attack_cost)
		

func crouch() -> void:
	if Input.is_action_pressed(\"crouch\") and is_on_floor() and not defending:
		crouching = true
		can_track_input = false
		
	elif not defending:
		crouching = false
		can_track_input = true
		player_sprite.crouching_off = true

func defense() -> void:
	if Input.is_action_pressed(\"defense\") and is_on_floor() and not crouching:
		defending = true
		can_track_input = false
		
	elif not crouching:
		defending = false
		can_track_input = true
		player_sprite.shield_off = true

func can_move() -> bool:
	return can_track_input and not attacking

func gravity(delta: float) -> void:
	if next_to_wall():
		velocity.y += wall_gravity * delta
		if velocity.y >= wall_gravity:
			velocity.y = player_gravity
	else:
		velocity.y += delta * player_gravity
		if velocity.y >= player_gravity:
			velocity.y = player_gravity

func next_to_wall() -> bool:
	if wall_ray.is_colliding() and not is_on_floor():
		if not_on_wall:
			velocity.y = 0
			not_on_wall = false
	else:
		not_on_wall = true
		
	return !not_on_wall

func spawn_effect(effect_path: String, offset: Vector2, is_flipped: bool) -> void:
	var effect_instance: EffectTemplate = load(effect_path).instance()
	
	get_tree().root.call_deferred(\"add_child\", effect_instance)
	
	if is_flipped:
		effect_instance.flip_h = true
	
	effect_instance.global_position = global_position + offset
	effect_instance.play_effect()

func spawn_spell() -> void:
	var spell: FireSpell = SPELL.instance()
	spell.spell_damage = stats.base_magic_attack + stats.bonus_magic_attack
	spell.global_position = global_position + spell_offset
	
	get_tree().root.call_deferred(\"add_child\", spell)

func is_damaged() -> bool:
	return on_hit or dead

# If player is right returns false, if left returns true
func is_flipped() -> bool:
	if direction < 0: return false
	
	return true

"

[sub_resource type="GDScript" id=26]
script/source = "extends Sprite
class_name PlayerTexture

signal game_over

var suffix: String = \"_right\"
var normal_attack: bool = false
var magic_attack: bool = false
var shield_off: bool = false
var crouching_off: bool = false

export(NodePath) onready var animation = get_node(animation) as AnimationPlayer
export(NodePath) onready var player = get_node(player) as KinematicBody2D
export(NodePath) onready var attack_collision = get_node(attack_collision) as CollisionShape2D

func animate(direction: Vector2) -> void:
	verify_position(direction)
	
	if player.is_damaged():
		hit_behavior()
	elif player.attacking or player.defending or player.crouching or player.next_to_wall():
		action_behavior()
	elif direction.y != 0: 
		vertical_behavior(direction)
	elif player.landing == true: 
		animation.play(\"landing\")
		player.set_physics_process(false)
	else: 
		horizontal_behavior(direction)

func verify_position(direction: Vector2) -> void:
	if direction.x > 0:
		flip_h = false
		suffix = \"_right\"
		player.direction = -1
		player.spell_offset = Vector2(100, -50)
		position = Vector2.ZERO
		player.wall_ray.cast_to = Vector2(5.5, 0)
	
	elif direction.x < 0:
		flip_h = true
		suffix = \"_left\"
		player.direction = 1
		position = Vector2(-2, 0)
		player.spell_offset = Vector2(-100, -50)
		player.wall_ray.cast_to = Vector2(-7.5, 0)
	
func vertical_behavior(direction: Vector2) -> void:
	if direction.y > 0:
		player.landing = true
		animation.play(\"fall\")
	if direction.y < 0:
		animation.play(\"jump\")

func horizontal_behavior(direction: Vector2) -> void:
	if direction.x != 0:
		animation.play(\"run\" + suffix)
	else:
		animation.play(\"idle\")

func action_behavior() -> void:
	if player.next_to_wall():
		animation.play(\"wall_slid\")
	elif player.attacking:
		if normal_attack:
			animation.play(\"attack\" + suffix)
		if magic_attack:
			animation.play(\"spell_attack\")
	elif player.defending and shield_off:
		animation.play(\"shield\")
		shield_off = false
	elif player.crouching and crouching_off:
		animation.play(\"crouch\")
		crouching_off = false

func hit_behavior() -> void:
	player.set_physics_process(false)
	attack_collision.set_deferred(\"disabled\", true)
	
	if player.dead:
		animation.play(\"death\")
	elif player.on_hit:
		animation.play(\"hit\")

func _on_animation_finished(anim_name: String):
	match anim_name:
		\"landing\":
			player.landing = false
			player.set_physics_process(true)

		\"attack_left\":
			normal_attack = false
			player.attacking = false

		\"attack_right\":
			normal_attack = false
			player.attacking = false

		\"spell_attack\":
			magic_attack = false
			player.attacking = false

		\"hit\":
			player.on_hit = false
			player.set_physics_process(true)

			if player.defending:
				animation.play(\"shield\")
				
			if player.crouching:
				animation.play(\"crouch\")

		\"death\":
			emit_signal(\"game_over\")
"

[sub_resource type="Animation" id=10]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("AttackArea/Collision:shape")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ null ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("AttackArea/Collision:shape:extents")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 10, 10 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("AttackArea/Collision:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("AttackArea/Collision:disabled")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/5/type = "value"
tracks/5/path = NodePath(".:collision_layer")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 4 ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Texture:texture")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ ExtResource( 3 ) ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("Texture:hframes")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 10 ]
}
tracks/8/type = "value"
tracks/8/path = NodePath("Texture:flip_h")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}

[sub_resource type="RectangleShape2D" id=8]

[sub_resource type="Animation" id=11]
resource_name = "attack_left"
length = 0.8
tracks/0/type = "value"
tracks/0/path = NodePath("AttackArea/Collision:shape")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.1, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ SubResource( 8 ), SubResource( 8 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("AttackArea/Collision:shape:extents")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.1, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 13.875, 6.25 ), Vector2( 13.875, 6.25 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("AttackArea/Collision:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.1 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( -40, 32 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("AttackArea/Collision:disabled")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.1, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ true, false, true ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("Texture:texture")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ ExtResource( 5 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("Texture:hframes")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 4 ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Texture:frame")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3 ]
}

[sub_resource type="Animation" id=29]
resource_name = "attack_right"
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath("AttackArea/Collision:shape")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.1, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ SubResource( 8 ), SubResource( 8 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("AttackArea/Collision:shape:extents")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.1, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 13.875, 6.25 ), Vector2( 13.875, 6.25 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("AttackArea/Collision:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.1 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 40, 32 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("AttackArea/Collision:disabled")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.1, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ true, false, true ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("Texture:texture")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ ExtResource( 5 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("Texture:hframes")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 4 ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Texture:frame")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3 ]
}

[sub_resource type="Animation" id=13]
resource_name = "crouch"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 72, 73, 74 ]
}

[sub_resource type="Animation" id=14]
resource_name = "death"
length = 1.2
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:collision_layer")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}

[sub_resource type="Animation" id=15]
resource_name = "fall"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 33, 34, 35, 36, 37 ]
}

[sub_resource type="Animation" id=16]
resource_name = "hit"
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 40, 41, 42, 43 ]
}

[sub_resource type="Animation" id=17]
resource_name = "idle"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ ExtResource( 3 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Texture:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 10 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Texture:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
}

[sub_resource type="Animation" id=18]
resource_name = "jump"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 26, 27, 28, 29, 30 ]
}

[sub_resource type="Animation" id=19]
resource_name = "landing"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 37, 38, 39 ]
}
tracks/1/type = "method"
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ "res://scenes/effect/dust/landing.tscn", Vector2( 0, 18 ), false ],
"method": "spawn_effect"
} ]
}

[sub_resource type="Animation" id=20]
resource_name = "run_left"
tracks/0/type = "method"
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"values": [ {
"args": [ "res://scenes/effect/dust/run.tscn", Vector2( 0, 18 ), true ],
"method": "spawn_effect"
}, {
"args": [ "res://scenes/effect/dust/run.tscn", Vector2( 0, 18 ), true ],
"method": "spawn_effect"
} ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Texture:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 10 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Texture:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Texture:texture")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ ExtResource( 2 ) ]
}

[sub_resource type="Animation" id=28]
resource_name = "run_right"
tracks/0/type = "method"
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"values": [ {
"args": [ "res://scenes/effect/dust/run.tscn", Vector2( 0, 18 ), false ],
"method": "spawn_effect"
}, {
"args": [ "res://scenes/effect/dust/run.tscn", Vector2( 0, 18 ), false ],
"method": "spawn_effect"
} ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Texture:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 10 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Texture:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Texture:texture")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ ExtResource( 2 ) ]
}

[sub_resource type="Animation" id=22]
resource_name = "shield"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 80, 81, 82 ]
}

[sub_resource type="Animation" id=23]
resource_name = "spell_attack"
length = 0.7
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 64, 65, 66, 67, 68, 69, 70 ]
}
tracks/1/type = "method"
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.3 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "spawn_spell"
} ]
}

[sub_resource type="Animation" id=24]
resource_name = "wall_slid"
length = 0.2
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 85, 86 ]
}

[node name="Player" instance=ExtResource( 1 )]
script = SubResource( 30 )

[node name="Texture" parent="." index="0"]
flip_h = true
script = SubResource( 26 )

[node name="Collision" parent="." index="1"]
position = Vector2( 5.5, 21.5 )

[node name="Animation" parent="." index="2"]
anims/RESET = SubResource( 10 )
anims/attack_left = SubResource( 11 )
anims/attack_right = SubResource( 29 )
anims/crouch = SubResource( 13 )
anims/death = SubResource( 14 )
anims/fall = SubResource( 15 )
anims/hit = SubResource( 16 )
anims/idle = SubResource( 17 )
anims/jump = SubResource( 18 )
anims/landing = SubResource( 19 )
anims/run_left = SubResource( 20 )
anims/run_right = SubResource( 28 )
anims/shield = SubResource( 22 )
anims/spell_attack = SubResource( 23 )
anims/wall_slid = SubResource( 24 )

[node name="Collision" parent="AttackArea" index="0"]
shape = SubResource( 8 )
